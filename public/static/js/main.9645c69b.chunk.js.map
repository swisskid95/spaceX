{"version":3,"sources":["logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","flight_number","launch_date_local","launch_success","mission_name","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","console","log","launches","map","key","LAUNCH_QUERY","Launch","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","marginTop","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9645c69b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.14ef0d8d.png\";","import React from \"react\";\nimport classNames from \"classnames\";\nimport Moment from \"react-moment\";\nimport { Link } from \"react-router-dom\";\n\nexport default function LaunchItem({\n  launch: { flight_number, launch_date_local, launch_success, mission_name }\n}) {\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4>\n            Mission:{\" \"}\n            <span\n              className={classNames({\n                \"text-success\": launch_success,\n                \"text-danger\": !launch_success\n              })}\n            >\n              {mission_name}\n            </span>\n          </h4>\n          <p>\n            Date: <Moment format=\"YYYY-MM-DD HH-mm\">{launch_date_local}</Moment>\n          </p>\n        </div>\n        <div className=\"col-md-3\">\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\n            Launch Details\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function MissionKey() {\n  return (\n    <div>\n      <p className=\"my-3\">\n        <span className=\"px-3 mr-2 bg-success\"></span> = Success\n      </p>\n      <p className=\"my-3\">\n        <span className=\"px-3 mr-2 bg-danger\"></span> = Failed\n      </p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport LaunchItem from \"./LaunchItem.js\";\nimport MissionKey from \"./MissionKey\";\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nexport const Launches = () => {\n  const { loading, error, data } = useQuery(LAUNCHES_QUERY);\n  return (\n    <div>\n      <h1 className=\"display-4 my-3\">Launches</h1>\n      <MissionKey />\n      {loading ? (\n        <h1>Loading ...</h1>\n      ) : error ? (\n        <p>Check console, something is wrong somewhere :|(</p>\n      ) : (\n        <>\n          {console.log(data)}\n          {data.launches.map(launch => (\n            <LaunchItem key={launch.flight_number} launch={launch} />\n          ))}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Launches;\n","import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { Link } from \"react-router-dom\";\nimport classNames from \"classnames\";\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nexport default function Launch(props) {\n  let { flight_number } = props.match.params;\n  flight_number = parseInt(flight_number);\n\n  const { loading, error, data } = useQuery(LAUNCH_QUERY, {\n    variables: { flight_number }\n  });\n\n  if (loading) return <h5>Loading ...</h5>;\n\n  if (error) {\n    console.log(error);\n    return (\n      <p>\n        An error occured, go back to the home page <Link to=\"/\">Here</Link>{\" \"}\n      </p>\n    );\n  }\n\n  const {\n    mission_name,\n    launch_year,\n    launch_success,\n    rocket: { rocket_id, rocket_name, rocket_type }\n  } = data.launch;\n\n  return (\n    <div>\n      <h2 className=\"display-4 my-3\">\n        <span className=\"text-dark\">Mission:</span> {mission_name}\n      </h2>\n      <h4 className=\"mb-3\">Launch Details</h4>\n      <ul className=\"list-group\">\n        <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n        <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n        <li className=\"list-group-item\">\n          Launch Successful:{\" \"}\n          <span\n            className={classNames({\n              \"text-success\": launch_success,\n              \"text-danger\": !launch_success\n            })}\n          >\n            {launch_success ? \"Yes\" : \"No\"}\n          </span>\n        </li>\n      </ul>\n      <h4 className=\"my-3\"> Rocket Details</h4>\n      <ul className=\"list-group\">\n        <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n        <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n        <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n      </ul>\n      <hr />\n      <Link to=\"/\" className=\"btn btn-warning\">\n        {\" \"}\n        Back{\" \"}\n      </Link>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport Launches from \"./components/Launches\";\nimport Launch from \"./components/Launch\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport logo from \"./logo.png\";\nimport \"./App.css\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\"\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img\n            src={logo}\n            alt=\"SpaceX\"\n            style={{\n              width: 300,\n              display: \"block\",\n              margin: \"auto\",\n              marginTop: -100\n            }}\n          />\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}